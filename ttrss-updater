#!/usr/bin/env bash
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
script_name=$(basename $0)
config_file=$script_dir/config

# Check for config file.
if [ ! -f $config_file ]; then
    echo "Missing $config_file, see config.sample"
fi

now=`date +"%Y%m%d-%H%M%S"`

# Check permissions on the config for this script.
perms=$(stat $config_file | sed -n '/^Access: (/{s/Access: (\([0-9]\+\).*$/\1/;p}')
if [[ "$perms" != "0600" ]]; then
    echo "WARNING: It is recommended to set '$config_file' permissions to '0600.'"
fi

source $config_file

# Check for missing variables.
if [ -z $repo_tt ]; then
    echo "Varaible repo_tt must be set in ${config_file}.  See config.sample"
fi

if [ -z $dir_tt ]; then
    echo "Varaible dir_tt must be set in ${config_file}.  See config.sample"
fi

if [ -z $dir_bk ]; then
    echo "Varaible dir_bk must be set in ${config_file}.  See config.sample"
fi

if [ -z $DB_TYPE ]; then
    echo "Varaible DB_TYPE must be set in ${config_file}.  See config.sample"
fi

if [ -z $DB_HOST ]; then
    echo "Varaible DB_HOST must be set in ${config_file}.  See config.sample"
fi

if [ -z $DB_PORT ]; then
    echo "Varaible DB_PORT must be set in ${config_file}.  See config.sample"
fi

if [ -z $DB_NAME ]; then
    echo "Varaible DB_NAME must be set in ${config_file}.  See config.sample"
fi

if [ -z $DB_USER ]; then
    echo "Varaible DB_USER must be set in ${config_file}.  See config.sample"
fi

if [ -z $DB_PASS ]; then
    echo "Varaible DB_PASS must be set in ${config_file}.  See config.sample"
fi

if [ -z $SELF_URL_PATH ]; then
    echo "Varaible SELF_URL_PATH must be set in ${config_file}.  See config.sample"
fi

# Check if the tt-rss git repo exists (sometimes it changes).
echo "Checking tt-rss repo."
if ! git ls-remote $repo_tt 2>&1 1>/dev/null; then
    exit 1
fi

# Check for tt-rss update cron job.
echo "Checking cron jobs."
if ! crontab -l | grep -q "$script_name"; then
    # Add tt-rss update cron job.
    echo "Adding tt-rss update cron job."
    crontab -l | { cat; echo "0 3 1 * *	$script_dir/$script_name"; } | crontab -
fi

# Check for feed update cron job.
if ! crontab -l | grep -q "/update.php --feeds"; then
    # Add feed update cron job.
    echo "Adding feed update cron job."
    crontab -l | { cat; echo "*/5 * * * *	/usr/bin/php $dir_tt/update.php --feeds --quiet &> /dev/null"; } | crontab -
fi

# Stop feed update cron job.
echo "Stopping feed update."
crontab -l | sed -e "/update.php --feeds/ s/^#*/#/" | crontab -

# Backup current install, delete backups older than 60 days.
if [ -d $dir_tt ]; then
    cd "$( dirname "$dir_tt" )"
    mkdir -p $dir_bk
    echo "Backing up tt-rss directory."
    tar -cf $dir_bk/tt-rss-${now}.tar -C $(dirname $dir_tt) $(basename $dir_tt)
    echo "Backing up tt-rss database."
    if [ "$DB_TYPE" == "mysql" ]; then
        mysqldump -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME 2>/dev/null | bzip2 > $dir_bk/tt-rss-db-${now}.sql.bz2
    elif [ "$DB_TYPE" == "pgsql" ]; then
        # This may not work since I haven't tested it with postgresql,
        # you probably need a .pgpass file in your home directory at the
        # least with your password in it.
        pg_dump -h$DB_HOST -U$DB_USER $DB_NAME 2>/dev/null | bzip2 > $dir_bk/tt-rss-db-${now}.sql.bz2
    fi
    find $dir_bk -mtime +60 -exec rm {} \;
fi

# Clone or pull from git.
if [ ! -d $dir_tt/.git ]; then
    echo "Cloning from git repository."
    git clone $repo_tt $dir_tt
else
    cd $dir_tt
    # Check if the fetch url is the same as the one in the config.
    if [ ! $(git remote -v | grep "\(fetch\)" | awk '{print $2}') == $repo_tt ]; then
        echo "Updating remote origin."
        git remote set-url origin $repo_tt
    fi
    echo "Pulling from git repository."
    git pull origin master
fi

# Write the config file.
echo "Writing config.php."
cat > $dir_tt/config.php<< EOF
<?php
    putenv('TTRSS_DB_TYPE=${DB_TYPE}');
    putenv('TTRSS_DB_HOST=${DB_HOST}');
    putenv('TTRSS_DB_PORT=${DB_PORT}');
    putenv('TTRSS_DB_NAME=${DB_NAME}');
    putenv('TTRSS_DB_USER=${DB_USER}');
    putenv('TTRSS_DB_PASS=${DB_PASS}');
    putenv('TTRSS_SELF_URL_PATH=${SELF_URL_PATH}');
EOF

# Restrict permissions on config file.
chmod 0600 $dir_tt/config.php

# Update .htaccess file.
echo "Updating .htaccess file."
cat > $dir_tt/.htaccess<< EOF
<FilesMatch "^\.">
    Require all denied
</FilesMatch>

<IfModule alias_module>
    RedirectMatch 404 /config.php
    RedirectMatch 404 /README.md
    RedirectMatch 404 /\.git
    RedirectMatch 404 /cache
</IfModule>
EOF

# Update the data base.
echo "Updating the database."
php $dir_tt/update.php --update-schema

# Start feed update cron job.
echo "Starting feed update."
crontab -l | sed -e "/update.php --feeds/ s/#*//" | crontab -

# Check website for errors.
if [[ $(curl -s -I -o /dev/null -w '%{http_code}' $SELF_URL_PATH) != 200 ]] || curl -s $SELF_URL_PATH | grep -q "Startup failed"; then
    echo "Error loading webpage."
else
    echo "No webpage errors detected."
fi

